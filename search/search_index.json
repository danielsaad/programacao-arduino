{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introdu\u00e7\u00e3o \u00e0 programa\u00e7\u00e3o com Arduino","text":""},{"location":"#conceitos-basicos-de-eletronica","title":"Conceitos b\u00e1sicos de eletr\u00f4nica","text":""},{"location":"#tensao-eletrica","title":"Tens\u00e3o el\u00e9trica","text":"<ul> <li>A tens\u00e3o el\u00e9trica, tamb\u00e9m conhecida como diferen\u00e7a de potencial, ou voltagem, \u00e9 a diferen\u00e7a de potencial el\u00e9trico entre dois pontos. </li> <li>Ela pode ser medida atrav\u00e9s de um volt\u00edmetro e sua unidade \u00e9 o Volt (V). </li> <li>Ela representa a tend\u00eancia que uma carga tem para ir de um ponto a outro. Sem tens\u00e3o el\u00e9trica, n\u00e3o h\u00e1 corrente.</li> </ul>"},{"location":"#corrente-eletrica","title":"Corrente el\u00e9trica","text":"<ul> <li>A corrente el\u00e9trica \u00e9 o fluxo de part\u00edculas com carga el\u00e9trica dentro de um condutor.</li> <li>H\u00e1 corrente quando h\u00e1 diferen\u00e7a de potencial.</li> <li>Pode ser medida por um amper\u00edmetro e sua unidade \u00e9 o Ampere (A).</li> <li>Sua intensidade \u00e9 medida pela quantidade de carga que passa por um intervalo de tempo.</li> <li>Pode ser cont\u00ednua ou alternada.</li> </ul>"},{"location":"#corrente-continua","title":"Corrente cont\u00ednua","text":"<ul> <li>A corrente el\u00e9trica cont\u00ednua mant\u00e9m sua intensidade constante ao longo do tempo.</li> <li>Tipicamente produzida por pilhas, baterias e fontes.  </li> </ul>"},{"location":"#corrente-alternada","title":"Corrente alternada","text":"<ul> <li>Sua intensidade varia ao longo do tempo.</li> <li>Rede el\u00e9trica dom\u00e9stica funciona com base em corrente alternada.</li> </ul>"},{"location":"#resistencia","title":"Resist\u00eancia","text":"<ul> <li>A resist\u00eancia el\u00e9trica \u00e9 a capacidade que um corpo qualquer de se opor \u00e0 passagem de corrente el\u00e9trica.</li> <li>\u00c9 medida em Ohms \\((\\Omega)\\)</li> </ul>"},{"location":"#lei-de-ohm","title":"Lei de Ohm","text":"<ul> <li>Em termos gerais, a lei de Ohm afirma que a resist\u00eancia (\\(R\\)) de um dispositivo condutor \u00e9 dada pela raz\u00e3o da tens\u00e3o el\u00e9trica (\\(V\\)) pela corrente (\\(A\\)):</li> </ul> <p>$$  R = \\frac{V}{I} $$ - Podemos calcular a corrente de um circuito el\u00e9trico utilizando essa equival\u00eancia da seguinte forma:</p> \\[ I = \\frac{V}{R} \\]"},{"location":"#circuitos-eletronicos","title":"Circuitos Eletr\u00f4nicos","text":"<ul> <li>Um circuito eletr\u00f4nico possui uma s\u00e9rie de componentes eletr\u00f4nicos para cumprir uma tarefa.</li> <li>Normalmente circuitos eletr\u00f4nicos obt\u00e9m entradas, atrav\u00e9s de sensores, processam essas entradas, e produzem uma sa\u00edda.</li> </ul>"},{"location":"#dispositivos-de-entrada","title":"Dispositivos de entrada","text":"<ul> <li>Dispositivos de entrada, inputs, ou sensores, tomam sinais do mundo f\u00edsico e os convertem em corrente ou voltagem.</li> <li>Exemplos de sensores:<ul> <li>Sensor de g\u00e1s;</li> <li>Term\u00f4metro;</li> <li>Fotoc\u00e9lulas;</li> <li>Potenci\u00f4metros;</li> <li>Sensor de presen\u00e7a;</li> <li>Sensor de dist\u00e2ncia;</li> <li>Sensor de umidade;</li> <li>etc.</li> </ul> </li> </ul>"},{"location":"#dispositivos-de-saida","title":"Dispositivos de sa\u00edda","text":"<ul> <li>Dispositivos de sa\u00edda convertem tens\u00e3o el\u00e9trica ou corrente em sinais f\u00edsicos.</li> <li>Exemplos de dispositivos de sa\u00edda:<ul> <li>Motores el\u00e9tricos;</li> <li>LEDs;</li> <li>Alarmes sonoros;</li> <li>etc.</li> </ul> </li> </ul>"},{"location":"#digital-vs-analogico","title":"Digital vs anal\u00f3gico","text":"<ul> <li>Sinais digitais podem assumir um n\u00famero finito de valores. Normalmente, utiliza-se um sistema bin\u00e1rio para sinais digitais.<ul> <li>Verdadeiro ou falso;</li> <li>0 ou 1;</li> <li>Com tens\u00e3o ou sem tens\u00e3o</li> </ul> </li> <li>Sinais anal\u00f3gicos por sua vez podem tomar uma infinidade de valores.</li> <li>Exemplos de dispositivos que lidam com sinais digitais:<ul> <li>Bot\u00f5es, LEDs, etc...</li> </ul> </li> <li>Exemplos de dispositivos que lidam com sinais anal\u00f3gicos:<ul> <li>Motores, potenci\u00f4metros, etc.</li> </ul> </li> </ul>"},{"location":"#modulacao-por-largura-de-pulso","title":"Modula\u00e7\u00e3o por largura de pulso","text":"<ul> <li>Modula\u00e7\u00e3o por largura de pulso, ou PWM \u00e9 uma t\u00e9cnica de modula\u00e7\u00e3o utilizada para obter resultados anal\u00f3gicos atrav\u00e9s de meios digitais.</li> <li>Uma onda quadrada \u00e9 gerada alternando os sinais de 0 e 1 com uma determinada frequ\u00eancia.</li> <li>Quanto maior a frequ\u00eancia, maior o suposto valor anal\u00f3gico. </li> </ul>"},{"location":"#microcontroladores","title":"Microcontroladores","text":"<ul> <li>Microcontroladores s\u00e3o utilizados para interpretar os sinais obtidos dos sensores e ativar determinadas a\u00e7\u00f5es nos dispositivos de sa\u00edda.</li> <li>Eles executam a l\u00f3gica do circuito. </li> </ul>"},{"location":"#protoboard","title":"Protoboard","text":"<ul> <li>As protoboards s\u00e3o placas reutiliz\u00e1veis utilizadas para constru\u00e7\u00e3o de circuitos eletr\u00f4nicos sem solda. </li> <li>As primeiras e as \u00faltimas duas linhas possuem conex\u00f5es horizontais.</li> <li>As demais colunas s\u00e3o conectadas verticalmente. </li> <li>Devemos nos atentar a essas conex\u00f5es na hora de construir nossos prot\u00f3tipos.</li> </ul>"},{"location":"#resistores","title":"Resistores","text":"<ul> <li>Resistores s\u00e3o dispositivos para limitar a passagem de corrente el\u00e9trica.</li> <li>Transforma energia el\u00e9trica em energia t\u00e9rmica (calor), fen\u00f4meno conhecido como efeito Joule.</li> <li>S\u00e3o muito utilizados em circuitos para que componentes n\u00e3o sejam fritados. </li> </ul> <p> - A resist\u00eancia dos resistores normalmente \u00e9 calculada de acordo com a seguinte tabela:</p> <p></p>"},{"location":"#leds","title":"LEDs","text":"<ul> <li>LEDs s\u00e3o dispositivos que emitem luz vis\u00edvel.</li> <li>Muito utilizados em produtos eletr\u00f4nicos para sinalizar avisos, como erros ou se o produto est\u00e1 em standby ou n\u00e3o.</li> <li>Podem ser encontrados em tamanhos pequenos ou grandes.</li> <li>Possuem uma vida \u00fatil longa e um baixo consumo de energia. </li> <li>Os LEDs possuem uma polaridade e, caso sejam conectados de forma invertida, n\u00e3o funcionar\u00e3o corretamente.</li> <li>O \u00e2nodo corresponde ao polo positivo, enquanto o c\u00e1todo ao negativo.</li> <li>A \"perna\" maior corresponde ao \u00e2nodo (+), enquanto a menor corresponde ao c\u00e1todo.</li> <li>Outra forma de descobrir a polaridade \u00e9 observar a base do LED. O lado que possuir um lado achatado, em vez de arredondado, \u00e9 o c\u00e1todo (-). </li> </ul> <p> - LEDs tamb\u00e9m podem possuir componentes RGB  (Red, Green and Blue) e reproduzir v\u00e1rias cores.  - Dentro da mesma estrutura existe um LED vermelho, um verde e um azul que, quando combinados, podem reproduzir milhares de cores diferentes.</p>"},{"location":"#botoes","title":"Bot\u00f5es","text":"<ul> <li>Bot\u00f5es s\u00e3o utilizados para ativar, ou desativar alguma fun\u00e7\u00e3o do circuito. </li> <li>Atua como uma esp\u00e9cie de interruptor, ativando, ou desativando uma determinada fun\u00e7\u00e3o.</li> <li>Tipicamente utilizados como dispositivos de entrada.</li> </ul>"},{"location":"#sensor-de-luminosidade","title":"Sensor de luminosidade","text":"<ul> <li>Sensores de luminosidade (LDRs) s\u00e3o resist\u00eancias de valor vari\u00e1vel.</li> <li>A resist\u00eancia varia de maneira inversamente proporcional \u00e0 incid\u00eancia de luz.</li> <li>Baixa luminosidade -&gt; alta resist\u00eancia</li> <li>Alta luminosidade -&gt; baixa resist\u00eancia</li> </ul>"},{"location":"#sensores-piezoeletricos","title":"Sensores piezoel\u00e9tricos","text":"<ul> <li>Sensores piezoel\u00e9tricos s\u00e3o capazes de converter mudan\u00e7as de press\u00e3o em sinais el\u00e9tricos ou vice-versa.</li> <li>Podem ser utilizadas para converter corrente em som, por exemplo, ou vice-versa.</li> </ul>"},{"location":"#potenciometros","title":"Potenci\u00f4metros","text":"<ul> <li>Potenci\u00f4metros s\u00e3o resist\u00eancias de valor vari\u00e1vel. </li> <li>Pode-se regular a intensidade de corrente ou voltagem que passa por um potenci\u00f4metro.</li> <li>Um exemplo cl\u00e1ssico de potenci\u00f4metro \u00e9 o bot\u00e3o de volume em um r\u00e1dio ou uma guitarra.</li> </ul>"},{"location":"#display-lcd","title":"Display LCD","text":"<ul> <li>Um display LCD \u00e9 um painel para exibir informa\u00e7\u00f5es como textos, imagens ou v\u00eddeos por meio da eletr\u00f4nica.</li> <li>Tipicamente utilizados como dispositivos de sa\u00edda. </li> </ul>"},{"location":"#motores-cc","title":"Motores CC","text":"<ul> <li>Um motor de corrente cont\u00ednua (CC) converte energia el\u00e9trica em energia mec\u00e2nica.</li> <li>A velocidade dele \u00e9 facilmente control\u00e1vel.</li> <li>Encontrado em brinquedos, rob\u00f4s, etc.</li> </ul>"},{"location":"#arduino","title":"Arduino","text":"<ul> <li>O projeto Arduino foi criado com intuito de oferecer aos estudantes a possibilidade de construir projetos de circuitos integrados de maneira barata.</li> <li>Neste curso utilizaremos o microcontrolador Arduino Uno R3 para desenvolvimento dos projetos.</li> </ul>"},{"location":"#disposicao-de-pinos","title":"Disposi\u00e7\u00e3o de pinos","text":""},{"location":"#entrada-e-saida","title":"Entrada e sa\u00edda","text":"<ul> <li>O Arduino possui diversas entradas e sa\u00eddas digitais e anal\u00f3gicas. Ao todo s\u00e3o:<ul> <li>14 pinos digitais.</li> <li>6 pinos anal\u00f3gicos.</li> </ul> </li> <li>Os pinos anal\u00f3gicos s\u00e3o utilizados para captar dados dos sensores anal\u00f3gicos, como medidores de umidade ou temperatura e convert\u00ea-los em um sinal digital de 10 bits, portanto os valores obt\u00edveis desses pinos variam de 0 a 1023.</li> <li>Os pinos digitais, por outro lado, podem assumir valores de 0 ou 1 (HIGH ou LOW), que representam tens\u00e3o 0V ou 5V. Podem ser utilizados tanto para entrada quanto para sa\u00edda.</li> </ul>"},{"location":"#alimentacao","title":"Alimenta\u00e7\u00e3o","text":"<ul> <li>Existem pinos de 5V, 3.3V e terra, para prover alimenta\u00e7\u00e3o aos componentes eletr\u00f4nicos.</li> <li>O Arduino, por sua vez, pode ser alimentado:<ul> <li>Atrav\u00e9s de um cabo USB AB.</li> <li>Atrav\u00e9s do conector f\u00eamea (12 no diagrama).</li> <li>Atrav\u00e9s do pino \\(V_{in}\\) e de uma bateria.</li> </ul> </li> </ul>"},{"location":"#pwm","title":"PWM","text":"<ul> <li>Atrav\u00e9s dos pinos 3, 5, 6, 9, 10 e 11, \u00e9 poss\u00edvel aplicar a t\u00e9cnica de PWM.</li> </ul>"},{"location":"#comunicacao-serial","title":"Comunica\u00e7\u00e3o serial","text":"<ul> <li>A comunica\u00e7\u00e3o serial do Arduino \u00e9 uma interface que permite o envio de informa\u00e7\u00f5es um bit de cada vez (serialmente).</li> <li>Permite que nos comuniquemos com um computador.</li> <li>Tudo por meio da porta serial.</li> </ul>"},{"location":"#tinkercad","title":"Tinkercad","text":"<ul> <li>A plataforma Thinkercad permite prototipar circuitos digitais com o microcontrolador Arduino R3.</li> <li>\u00c9 poss\u00edvel desenhar circuitos com l\u00f3gicas complexas sem necessariamente ter o hardware em m\u00e3os.</li> <li>Muito \u00fatil para aprender programa\u00e7\u00e3o e introdu\u00e7\u00e3o a eletr\u00f4nica.</li> <li>A plataforma pode ser acessada em https://www.tinkercad.com/</li> </ul>"},{"location":"#criacao-de-prototipos","title":"Cria\u00e7\u00e3o de prot\u00f3tipos","text":"<ul> <li>Para criar um prot\u00f3tipo, basta clicar em Designs -&gt; Create -&gt; Circuit. ![Cria\u00e7\u00e3o de um prot\u00f3tipo][recursos/criacao-prototipo.gif]</li> </ul>"},{"location":"#programacao","title":"Programa\u00e7\u00e3o","text":"<ul> <li>O Arduino utiliza um dialeto da linguagem de programa\u00e7\u00e3o <code>C++</code> para controlar os dispositivos.</li> <li>Programas s\u00e3o escritos diretamente em um arquivo texto, compilados e transferidos para a execu\u00e7\u00e3o no Arduino.</li> <li>Para come\u00e7ar a entender programas em Arduino, \u00e9 necess\u00e1rio entender que um programa possui dois blocos de c\u00f3digo, chamados de fun\u00e7\u00f5es, b\u00e1sicos, <code>setup</code>e <code>loop</code>.<ul> <li><code>setup</code>: cont\u00e9m todas as instru\u00e7\u00f5es que ser\u00e3o executadas antes do <code>loop</code>.</li> <li><code>loop</code>: as instru\u00e7\u00f5es contidas aqui ser\u00e3o executadas indefinidamente de maneira c\u00edclica. Afinal, um microcontrolador n\u00e3o deveria parar a sua execu\u00e7\u00e3o. </li> </ul> </li> <li>Exemplo b\u00e1sico de programa em Arduino que pisca um LED de \\(1000\\) em \\(1000\\) milissegundos.</li> </ul> <pre><code>const int pino_led = 13; // pino 13 ser\u00e1 utilizado para ligar e desligar o LED\n\nvoid setup(){\n    pinMode(pino_led,OUTPUT);\n}\n\nvoid loop(){\n    digitalWrite(pino_led,HIGH);\n    delay(1000);\n    digitalWrite(pino_led,LOW);\n    delay(1000);\n}\n</code></pre> <ul> <li> <p>O programa faz o seguinte:</p> <ul> <li>Em <code>setup</code>, atribu\u00edmos ao pino \\(13\\) a vari\u00e1vel <code>led_pin</code> no modo de sa\u00edda (OUTPUT). Ou seja, esse pino ser\u00e1 utilizado para enviar sinais a um dispositivo de sa\u00edda.</li> <li>Em <code>loop</code>: <ul> <li>Enviamos o sinal <code>HIGH</code> a partir do pino \\(13\\).</li> <li>Esperamos um segundo atrav\u00e9s da instru\u00e7\u00e3o <code>delay(1000)</code>;</li> <li>Enviamos o sinal <code>LOW</code>a partir do pino \\(13\\).</li> <li>Esperamos mais um segundo.</li> </ul> </li> <li>Ap\u00f3s a \u00faltima instru\u00e7\u00e3o de <code>loop</code>, voltamos ao in\u00edcio (realmente \u00e9 um <code>loop</code>).</li> </ul> </li> <li> <p>O circuito resultante \u00e9 o seguinte: </p> </li> </ul>"},{"location":"#comentarios","title":"Coment\u00e1rios","text":"<ul> <li>Coment\u00e1rios permitem que o c\u00f3digo seja documento para facilitar a sua leitura.</li> <li>S\u00e3o instru\u00e7\u00f5es completamente ignoradas pelo compilador, s\u00f3 fazem sentido ao programador.</li> <li>S\u00e3o muito \u00fateis para que outras pessoas (e at\u00e9 voc\u00ea mesmo) entendam o seu c\u00f3digo.</li> <li>Coment\u00e1rios s\u00e3o feitos ap\u00f3s colocar texto ap\u00f3s os caracteres <code>//</code></li> <li>Exemplo: <pre><code>const int pino_led = 13; // pino 13 ser\u00e1 utilizado para ligar e desligar o LED\n</code></pre></li> </ul>"},{"location":"#variaveis","title":"Vari\u00e1veis","text":"<ul> <li>Vari\u00e1veis s\u00e3o nomes para endere\u00e7os de mem\u00f3ria.</li> <li>Podemos armazenar valores em mem\u00f3rias atrav\u00e9s do nome de uma vari\u00e1vel.</li> <li>Vari\u00e1veis podem assumir diferentes tipos, como caracteres, inteiros, reais, entre outros.</li> </ul>"},{"location":"#tipos-de-variaveis","title":"Tipos de vari\u00e1veis","text":"<ul> <li>Trabalharemos com os seguintes tipos de vari\u00e1vel nesse curso:<ul> <li><code>char</code>: caractere, armazena um caractere. </li> <li><code>bool</code>: booleano, armazena <code>true</code> (verdadeiro) ou <code>false</code> (falso).</li> <li><code>byte</code>: armazena inteiros sem sinal de 8-bits na faixa \\([0,255]\\).</li> <li><code>int</code>: armazena inteiros de 16-bits na faixa \\([-32768,32767]\\).</li> <li><code>float</code>: armazena n\u00fameros reais usando representa\u00e7\u00e3o em ponto flutuante de precis\u00e3o simples da ordem de \\(-10^{38}\\) \u00e0 \\(10^{38}\\).</li> <li><code>double</code>: armazena n\u00fameros reais usando representa\u00e7\u00e3o em ponto flutuante de precis\u00e3o dupla.</li> </ul> </li> <li>Vari\u00e1veis precisam ser declaradas para serem utilizadas. Para declarar vari\u00e1veis utilizamos a seguinte sintaxe:<ul> <li><code>&lt;tipo&gt; nome_da_variavel</code>; </li> </ul> </li> <li>Exemplos:<ul> <li><code>int x;</code></li> <li><code>byte pino_led</code>;</li> <li><code>double nota;</code></li> <li><code>bool condicao</code>;</li> </ul> </li> <li>\u00c9 importante que os nomes das vari\u00e1veis n\u00e3o possuam espa\u00e7os e nem caracteres especiais.</li> <li>Vari\u00e1veis de mesmo nome tamb\u00e9m n\u00e3o podem ser declaradas duas vezes no mesmo escopo.</li> <li>Vari\u00e1veis com o modificador <code>const</code> s\u00e3o utilizadas para representar constantes. Seu valor n\u00e3o pode ser alterado.</li> </ul>"},{"location":"#operadores-aritmeticos","title":"Operadores aritm\u00e9ticos","text":"<ul> <li>\u00c9 poss\u00edvel fazer opera\u00e7\u00f5es aritm\u00e9ticas entre vari\u00e1veis utilizando o Arduino.</li> <li>As seguintes opera\u00e7\u00f5es s\u00e3o suportadas:</li> </ul> Operador Significado = Atribui\u00e7\u00e3o + Soma - Subtra\u00e7\u00e3o * Multiplica\u00e7\u00e3o / Divis\u00e3o % Resto"},{"location":"#atribuicao","title":"Atribui\u00e7\u00e3o","text":"<ul> <li>Permite que vari\u00e1veis assumam valores ou resultados de express\u00f5es aritm\u00e9ticas.</li> <li>Exemplos: <pre><code>a = 5; // a recebe o valor 5\na = b + c; // a recebe o valor da soma das vari\u00e1veis b e c.\n</code></pre></li> </ul>"},{"location":"#soma","title":"Soma","text":"<ul> <li>O operador <code>+</code> realiza soma de valores e vari\u00e1veis.</li> <li>Exemplo: <pre><code>int a = 5;\nint b = 10;\nint c = 0;\nc = a + b;  // a vari\u00e1vel c receber\u00e1 o valor 15\n</code></pre></li> </ul>"},{"location":"#subtracao","title":"Subtra\u00e7\u00e3o","text":"<ul> <li>O operador <code>-</code>realiza a subtra\u00e7\u00e3o de valores e vari\u00e1veis.</li> <li>Exemplos: <pre><code>int a = 5;\nint b = 10;\nint c = 0;\nc = a - b;  // a vari\u00e1vel c receber\u00e1 -5\n</code></pre></li> </ul> <pre><code>float a = 5.5;\nfloat b = 6.6;\nfloat c = 0;\nc = a - b;  // a vari\u00e1vel c receber\u00e1 -1.1\n</code></pre>"},{"location":"#multiplicacao","title":"Multiplica\u00e7\u00e3o","text":"<ul> <li>O operador <code>*</code> realiza a multiplica\u00e7\u00e3o entre valores e vari\u00e1veis.</li> <li>Exemplos:</li> </ul> <pre><code>int a = 5;\nint b = 10;\nint c = 0;\nc = a * b;  // a vari\u00e1vel c receber\u00e1 50\n</code></pre> <pre><code>float a = 5.5;\nfloat b = 6.6;\nfloat c = 0;\nc = a * b;  // a vari\u00e1vel c receber\u00e1 36.3\n</code></pre>"},{"location":"#divisao","title":"Divis\u00e3o","text":"<ul> <li>O operador <code>/</code> realiza a divis\u00e3o entre valores e vari\u00e1veis.</li> <li>O denominador deve ser diferente de \\(0\\) para evitar erros.</li> <li>Exemplos: <pre><code>int a = 50;\nint b = 10;\nint c = 0;\nc = a / b;  // a vari\u00e1vel c receber\u00e1 o valor 5\n</code></pre></li> </ul> <pre><code>float a = 55.5;\nfloat b = 6.6;\nfloat c = 0;\nc = a / b;  // a vari\u00e1vel c receber\u00e1 o valor 8.409\n</code></pre> <ul> <li>Importante: caso o numerador e o denominador sejam inteiros , ser\u00e1 efetuada uma divis\u00e3o inteira, isto \u00e9, a parte fracion\u00e1ria \u00e9 desprezada.</li> <li>Exemplo: <code>5/2 = 2</code>.</li> <li>Use isso ao seu favor.</li> </ul>"},{"location":"#resto","title":"Resto","text":"<ul> <li>O operador <code>%</code> \u00e9 capaz de extrair o resto da divis\u00e3o de dois n\u00fameros.</li> <li>S\u00f3 \u00e9 aplic\u00e1vel quando os operandos s\u00e3o inteiros. <pre><code>int x = 0;\nx = 7 % 5;  // x recebe 2\nx = 9 % 5;  // x recebe 4\nx = 5 % 5;  // x recebe 0\nx = 4 % 5;  // x recebe 4\nx = -4 % 5; // x recebe -4\nx = 4 % -5; // x recebe 4\n</code></pre></li> </ul>"},{"location":"#comunicacao-serial_1","title":"Comunica\u00e7\u00e3o serial","text":"<ul> <li>Atrav\u00e9s da comunica\u00e7\u00e3o serial \u00e9 poss\u00edvel obter dados e enviar dados.</li> <li>Para utilizar a comunica\u00e7\u00e3o serial, \u00e9 necess\u00e1rio inicializ\u00e1-la via <code>setup</code> <pre><code>void setup() {\n    Serial.begin(9600); \n}\n</code></pre></li> </ul>"},{"location":"#saida","title":"Sa\u00edda","text":"<ul> <li>Para enviar o valor de uma vari\u00e1vel <code>x</code>\u00e0 porta serial, usamos o comando <code>Serial.print(x)</code>.</li> <li>Se quisermos pular uma linha ap\u00f3s a impress\u00e3o, podemos usar o comando <code>Serial.println(x)</code>.</li> </ul>"},{"location":"#leitura-de-inteiros","title":"Leitura de inteiros","text":"<ul> <li>Para ler inteiros via comunica\u00e7\u00e3o serial, precisamos de tr\u00eas pequenos passos.</li> <li>Iniciar a comunica\u00e7\u00e3o serial no <code>setup</code></li> <li>Criar a fun\u00e7\u00e3o ler_inteiro abaixo: <pre><code>int le_inteiro(){\n    int x;\n    while(Serial.available() == 0)\n    {}\n    x = Serial.parseInt();\n    return x;\n}\n</code></pre></li> <li>Chamar a fun\u00e7\u00e3o `le_inteiro() quando apropriado.</li> </ul> <p>Exemplo</p> <ul> <li>O programa abaixo l\u00ea dois inteiros e imprime a soma deles na comunica\u00e7\u00e3o serial.</li> </ul> <pre><code>int le_inteiro(){\n    int x;\n    while(Serial.available() == 0)\n    {}\n    x = Serial.parseInt();\n    return x;\n}\n\n\nvoid setup(){\n    Serial.begin(9600);\n}\n\nvoid loop(){\n    int x = le_inteiro();\n    int y = le_inteiro();\n    Serial.println(x+y);\n}\n</code></pre>"},{"location":"#leitura-de-numeros-reais","title":"Leitura de n\u00fameros reais","text":"<ul> <li> <p>O processo \u00e9 muito parecido ao dos n\u00fameros inteiros, mas com a fun\u00e7\u00e3o <code>le_real</code> abaixo. Exemplo</p> </li> <li> <p>O programa abaixo l\u00ea dois n\u00fameros reais e imprime a soma deles na comunica\u00e7\u00e3o serial. <pre><code>int le_inteiro(){\n    int x;\n    while(Serial.available() == 0)\n    {}\n    x = Serial.parseInt();\n    return x;\n}\n\nfloat le_real(){\n    float x;\n    while(Serial.available() == 0)\n    {}\n    x = Serial.parseFloat();\n    return x;\n}\n\nvoid setup(){\n    Serial.begin(9600);\n}\n\nvoid loop(){\n    float x = le_real();\n    float y = le_real();\n    Serial.println(x+y);\n}\n</code></pre></p> </li> </ul>"},{"location":"#exercicios","title":"Exerc\u00edcios","text":"<ol> <li>Crie um programa que leia tr\u00eas n\u00fameros reais  e imprima a m\u00e9dia aritm\u00e9tica deles via comunica\u00e7\u00e3o serial.<ul> <li>Por exemplo, se os n\u00fameros lidos forem \\(5.5\\), \\(6.0\\) e \\(7.5\\), a m\u00e9dia que ser\u00e1 impressa \u00e9 \\(6.33333\\)</li> </ul> </li> <li>Leia um n\u00famero real, contendo o valor de uma temperatura em Fahrenheit, converta para Celsius, e imprima o resultado via comunica\u00e7\u00e3o serial. Por exemplo:<ul> <li>\\(32\\) Fahrenheits \u00e9 igual a \\(0\\) Celsius.</li> <li>\\(50\\) Fahrenheits \u00e9 igual a -10 Celsius</li> <li>\\(100\\) Fahrenheit \u00e9 igual a \\(37.7778\\) Celsius.</li> </ul> </li> <li>Leia um n\u00famero real, contendo o valor de uma temperatura em Celsius, converta para Fahrenheit, e imprima o resultado via comunica\u00e7\u00e3o serial.</li> <li>Crie um programa que leia um inteiro, representando uma quantidade em segundos, converta e imprima essa quantidade no formato hora, minuto e segundo, via comunica\u00e7\u00e3o serial. Por exemplo:<ul> <li>\\(39323\\) segundos equivale \u00e0 \\(10\\) horas, \\(55\\) minutos e \\(23\\) segundos.</li> </ul> </li> <li>Crie um programa que leia tr\u00eas n\u00fameros reais indicando o comprimento dos lados de um tri\u00e2ngulo, calcule a sua \u00e1rea, e imprima o resultado via comunica\u00e7\u00e3o serial.<ul> <li>Utilize a f\u00f3rmula de Heron para calcular a \u00e1rea do tri\u00e2ngulo: \\(\\sqrt{p \\cdot (p-a) \\cdot (p-b) \\cdot (p-c)}\\) , em que \\(p = \\frac{a+b+c}{2}\\) .</li> <li>A fun\u00e7\u00e3o <code>sqrt</code> pode ser utilizada para calcular a raiz de um n\u00famero. Exemplo <code>sqrt(2)</code> \\(= 1.4142135623\\ldots\\) </li> </ul> </li> </ol>"},{"location":"#entrada-e-saida_1","title":"Entrada e sa\u00edda","text":"<ul> <li>Atrav\u00e9s dos pinos do Arduino \u00e9 poss\u00edvel ler e enviar sinais digitais e anal\u00f3gicos.</li> <li>Veremos agora as fun\u00e7\u00f5es que trabalham com entrada e sa\u00edda digital e anal\u00f3gica.</li> </ul>"},{"location":"#atribuicao-dos-pinos","title":"Atribui\u00e7\u00e3o dos pinos","text":"<ul> <li>Antes de poder usar os pinos, \u00e9 necess\u00e1rio atribuir a fun\u00e7\u00e3o deles.</li> <li>Para isso, usamos a fun\u00e7\u00e3o <code>pinMode()</code> que deve ser colocada no <code>setup()</code>.</li> <li>Ela recebe o n\u00famero do pino e se ele ser\u00e1 um pino de entrada ou sa\u00edda. Exemplo: <pre><code>pinMode(9,OUTPUT);\n</code></pre></li> <li>No exemplo acima, o pino \\(9\\) \u00e9 configurado como sa\u00edda, isto \u00e9, ele enviar\u00e1 um sinal para um dispositivo.</li> <li>Pinos de entrada recebem sinais dos sensores enquanto pinos de sa\u00edda enviam dados para os dispositivos de sa\u00edda.</li> <li>Os pinos de \\(0\\) a \\(13\\) podem ser utilizados tando para entrada digital (INPUT) como sa\u00edda digital (OUTPUT).</li> <li>Os pinos \\(3\\), \\(5\\), \\(6\\), \\(9\\), \\(10\\) e \\(11\\) s\u00e3o PWM, logo, podem enviar sinais anal\u00f3gicos modulados a partir da t\u00e9cnica de PWM para dispositivos de sa\u00edda anal\u00f3gicos.</li> <li>Os pinos \\(A0\\), \\(A1\\), \\(A2\\), \\(A3\\), \\(A4\\) e \\(A5\\) recebem apenas entradas anal\u00f3gicas.</li> </ul>"},{"location":"#entrada-e-saida-digital","title":"Entrada e sa\u00edda digital","text":""},{"location":"#entrada-digital","title":"Entrada digital","text":"<ul> <li>A fun\u00e7\u00e3o <code>digitalRead()</code> l\u00ea o valor de um pino digital e devolve <code>HIGH</code> (1) ou <code>LOW</code> (0), de acordo com a l\u00f3gica Booleana. O exemplo abaixo diz se um bot\u00e3o foi pressionado ou n\u00e3o.</li> </ul> <pre><code>const int pino_botao = 2;\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(pino_botao, INPUT);\n}\n\nvoid loop() {\n    int valor_botao = digitalRead(pino_botao);\n    Serial.print(\"O valor do botao e: \");\n    Serial.println(valor_botao);\n    delay(100);\n}\n</code></pre> <ul> <li>Se o bot\u00e3o n\u00e3o for pressionado, n\u00e3o h\u00e1 conex\u00e3o entre os dois lados do bot\u00e3o, realizando uma leitura <code>LOW</code>.</li> <li>Quando o bot\u00e3o \u00e9 pressionado, o circuito fecha, fazendo a leitura do valor <code>HIGH</code>.</li> </ul> <p>Exerc\u00edcio</p> <ul> <li>Modifique o circuito anterior para ligar um LED quando o bot\u00e3o for pressionado.</li> </ul>"},{"location":"#saida-digital","title":"Sa\u00edda digital","text":"<ul> <li>A fun\u00e7\u00e3o <code>digitalWrite()</code> escreve um valor <code>HIGH</code> ou <code>LOW</code>a partir de um pino digital.</li> <li>Exemplo: <code>digitalWrite(3,HIGH)</code> escreve o valor <code>HIGH</code> a partir do pino <code>3</code>.</li> <li>O exemplo inicial do pisca-led ilustra a fun\u00e7\u00e3o <code>digitalWrite</code>.</li> </ul> <p>Exerc\u00edcio</p> <ul> <li>Projete um circuito que lida com um pequeno sem\u00e1foro. Ele dever\u00e1 possui tr\u00eas LEDs das cores vermelho, amarelo e verde. O LED vermelho dever\u00e1 ficar ligado por 30 segundos, o amarelo por 3 e o verde por 10. O LED verde s\u00f3 liga ap\u00f3s o vermelho desligar, o amarelo s\u00f3 liga ap\u00f3s o verde desligar e o vermelho s\u00f3 liga ap\u00f3s o amarelo desligar. O primeiro LED a ser ligado dever\u00e1 ser o vermelho.</li> </ul>"},{"location":"#entrada-analogica","title":"Entrada anal\u00f3gica","text":"<ul> <li>A entrada anal\u00f3gica \u00e9 realizada nos pinos de \\(A0\\) a \\(A5\\). </li> <li>Os valores lidos possuem \\(10\\) bits, logo, est\u00e3o entre \\(0\\) e \\(1023\\).</li> <li>O circuito abaixo realiza a leitura a partir de um potenci\u00f4metro e imprime o valor lido via comunica\u00e7\u00e3o serial.</li> </ul> <pre><code>const int pino_potenciometro = A5;\n\nvoid setup() {\n  Serial.begin(9600);\n  pinMode(pino_potenciometro,INPUT);\n}\n\nvoid loop(){\n    int valor_potenciometro = analogRead(pino_potenciometro);\n    Serial.print(\"Valor lido: \");\n    Serial.println(valor_potenciometro);\n}\n</code></pre> <p>Exerc\u00edcios</p> <ul> <li>Converta a sa\u00edda do potenci\u00f4metro para a voltagem correspondente, isto \u00e9, de \\(0\\)V a \\(5\\)V.</li> </ul>"},{"location":"#saida-analogica","title":"Sa\u00edda anal\u00f3gica","text":"<ul> <li>A sa\u00edda anal\u00f3gica \u00e9 feita atrav\u00e9s dos pinos digitais PWM.</li> <li>O comando a ser utilizado \u00e9 o <code>analogWrite</code>.</li> <li>O circuito abaixo acende um LED de acordo com o valor do potenci\u00f4metro, quanto maior o valor da sa\u00edda do potenci\u00f4metro, mais brilho ter\u00e1 o LED. </li> </ul> <pre><code>const int pino_potenciometro = A5;\nconst int pino_pwm = 3;\n\nvoid setup() {\n    Serial.begin(9600);\n    pinMode(pino_potenciometro,INPUT);\n    pinMode(pino_pwm,OUTPUT);\n\n}\n\nvoid loop(){\n    int valor_potenciometro = analogRead(pino_potenciometro);\n    Serial.print(\"Valor lido: \");\n    Serial.println(valor_potenciometro);\n    valor_potenciometro = map(valor_potenciometro, 0, 1023, 0, 255);\n    Serial.print(\"Valor convertido: \");\n    Serial.println(valor_potenciometro);\n    analogWrite(pino_pwm,valor_potenciometro);\n    delay(100);\n}\n</code></pre> <ul> <li>O valor anal\u00f3gico lido tem \\(10\\) bits, portanto varia de \\(0\\) a \\(1023\\).</li> <li>Contudo, o pino PWM deve emitir valores de \\(8\\) bits, variando de \\(0\\) a \\(255\\).</li> <li>Utilizamos o comando <code>map</code> para fazer o mapeamento de um valor de 10-bits para um valor de 8-bits.</li> </ul> <p>Exerc\u00edcios</p> <ol> <li>Utilize tr\u00eas potenci\u00f4metros para regular a cor de um LED RGB. Cada potenci\u00f4metro ficar\u00e1 respons\u00e1vel por um componente de cor (Red, Green ou Blue).</li> <li>Ligue o potenci\u00f4metro a um motor el\u00e9trico, fazendo ele girar de acordo com o valor do potenci\u00f4metro.</li> </ol>"},{"location":"#estruturas-condicionais","title":"Estruturas condicionais","text":"<ul> <li>Imagine o seguinte problema: queremos projetar um circuito l\u00ea um inteiro da porta serial e acende um LED verde se ele for par e um vermelho se ele for \u00edmpar.</li> <li>O nosso c\u00f3digo tem que ter a capacidade de executar instru\u00e7\u00f5es diferentes, dependendo se o n\u00famero for par ou \u00edmpar.</li> <li>Atrav\u00e9s das estruturas condicionais, podemos controlar o fluxo de um programa.</li> <li>Podemos decidir executar um peda\u00e7o de c\u00f3digo ou n\u00e3o baseado em uma condi\u00e7\u00e3o ser verdadeira ou falsa.</li> <li>Para isso, utilizamos os operadores e conectivos l\u00f3gicos.</li> </ul>"},{"location":"#operadores-logicos","title":"Operadores l\u00f3gicos","text":"<ul> <li>Express\u00f5es l\u00f3gicas em <code>C++</code> s\u00f3 possuem dois tipos de valores: verdadeiro (1, HIGH) ou falso (0, LOW).</li> <li>Para construir uma express\u00e3o l\u00f3gica, utilizamos os operadores l\u00f3gicos, que est\u00e3o listados abaixo.</li> </ul> Operador Significado == Igualdade != Diferen\u00e7a &gt; Maior &gt;= Maior ou igual &lt; Menor &lt;= Menor ou igual"},{"location":"#igualdade","title":"Igualdade","text":"<ul> <li>O operador <code>==</code>compara os dois lados da igualdade e retorna verdadeiro se s\u00e3o iguais e falso caso contr\u00e1rio.</li> <li>N\u00e3o confunda o operador <code>==</code>de igualdade com o <code>=</code> para atribuir valores \u00e0s vari\u00e1veis.</li> <li>Exemplos: <pre><code>9 == 9 // retorna 1 (verdadeiro)\n0 == 5 // retorna 0 (falso)\n2 + 3 == 1 + 4 // Retorna verdadeiro ou falso?\n</code></pre></li> </ul> <pre><code>int a = 2; \nint b = 3;\nint c = 1;\nint d = 4;\na + c == b + d // Retorna verdadeiro ou falso?\n</code></pre>"},{"location":"#diferenca","title":"Diferen\u00e7a","text":"<ul> <li>O operador <code>!=</code> \u00e9 o operador de diferen\u00e7a. Ele compara os dois lados e retorna 1 se s\u00e3o diferentes e 0 caso contr\u00e1rio.</li> <li>Exemplos: <pre><code>9 != 9 // retorna 0 (falso)\n0 != 5 // retorna 1 (verdadeiro)\n</code></pre></li> </ul> <pre><code>int a = 2; \nint b = 3;\nint c = 1;\nint d = 4;\na + c == b + d // Retorna verdadeiro ou falso?\n</code></pre>"},{"location":"#maior","title":"Maior","text":"<ul> <li>O operador <code>&gt;</code>,quando aplicado sobre duas express\u00f5es, retorna 1 se o que est\u00e1 \u00e0 esquerda do operador \u00e9 maior do que est\u00e1 \u00e0 direita e 0 caso contr\u00e1rio.</li> <li>Exemplos:</li> </ul> <pre><code>9 &gt; 9 // retorna 0\n5 &gt; 0 // retorna 1\n</code></pre>"},{"location":"#maior-ou-igual","title":"Maior ou Igual","text":"<ul> <li>O operador <code>&gt;=</code>, quando aplicado sobre duas express\u00f5es, retorna 1 se o que est\u00e1 a esquerda do operador \u00e9 maior do que o que est\u00e1 \u00e0 direita e 0 caso contr\u00e1rio.</li> <li>Exemplos: <pre><code>9 &gt;= 9 // retorna 1\n0 &gt;= 5 // retorna 0;\n</code></pre></li> </ul>"},{"location":"#menor","title":"Menor","text":"<ul> <li>O operador <code>&lt;</code>, quando aplicado sobre duas express\u00f5es, retorna 1, se o que est\u00e1 \u00e0 esquerda \u00e9 menor do que o que est\u00e1 \u00e0 direita.</li> <li>Exemplos: <pre><code>9 &lt; 9 // retorna 0\n0 &lt; 5 // retorna 1\n</code></pre></li> </ul>"},{"location":"#menor-ou-igual","title":"Menor ou igual","text":"<ul> <li>O operador <code>&lt;=</code>, quando aplicado sobre duas express\u00f5es, retorna 1 se o que est\u00e1 \u00e0 esquerda \u00e9 menor ou igual do que o que est\u00e1 \u00e0 direita.</li> <li>Exemplos: <pre><code>9 &lt;= 9 // retorna 1\n5 &lt;= 0 // retorna 0\n</code></pre></li> </ul>"},{"location":"#conectivos-logicos","title":"Conectivos l\u00f3gicos","text":"<ul> <li>Para compor express\u00f5es l\u00f3gicas mais complexas, podemos juntar duas express\u00f5es l\u00f3gicas atrav\u00e9s de um conectivo l\u00f3gico.</li> <li>S\u00e3o tr\u00eas os conectivos l\u00f3gicos, o N\u00c3O (<code>!</code>), o E (<code>&amp;&amp;</code>)e o OU (<code>||</code>).</li> </ul>"},{"location":"#conectivo-nao","title":"Conectivo N\u00c3O","text":"<ul> <li>O conectivo N\u00c3O (<code>!</code>) inverte o resultado de uma express\u00e3o l\u00f3gica.</li> <li>Se uma express\u00e3o <code>e</code> for verdadeira, <code>!e</code> ser\u00e1 falsa. Se <code>e</code>for falsa, <code>!e</code> ser\u00e1 verdadeira, conforme a tabela verdade abaixo.</li> <li>\u00c9 um operador un\u00e1rio, s\u00f3 atua sobre uma \u00fanica express\u00e3o.</li> </ul> <code>e</code> <code>!e</code> 0 1 1 0"},{"location":"#conectivo-e","title":"Conectivo E","text":"<ul> <li>O conectivo E (<code>&amp;&amp;</code>) \u00e9 bin\u00e1rio, atua sobre duas express\u00f5es <code>e1</code> e <code>e2</code>.</li> <li>Retorna verdadeiro apenas quando as duas s\u00e3o verdadeiras.</li> <li>Se pelo menos uma delas \u00e9 falsa, <code>e1 &amp;&amp; e2</code> devolve falso.</li> </ul> <code>e1</code> <code>e2</code> <code>e1 &amp;&amp; e2</code> 0 0 0 0 1 0 1 0 0 1 1 1"},{"location":"#conectivo-ou","title":"Conectivo OU","text":"<ul> <li>O conectivo OU (<code>||</code>) \u00e9 bin\u00e1rio, atua sobre duas express\u00f5es <code>e1</code> e <code>e2</code>.</li> <li>Retorna verdadeiro apenas quando pelo menos uma das express\u00f5es \u00e9 verdadeira.</li> <li>Se as duas express\u00f5es s\u00e3o falsas, <code>e1 || e2</code> devolve falso.</li> </ul> <code>e1</code> <code>e2</code> e1 | | e2 0 0 0 0 1 1 1 0 1 1 1 1 #### Exemplos <ul> <li>Uma express\u00e3o que avalia se uma vari\u00e1vel <code>x</code>\u00e9 par: <pre><code>x % 2 == 0\n</code></pre></li> <li>Uma express\u00e3o que avalia se uma vari\u00e1vel <code>x</code>\u00e9 \u00edmpar:  <pre><code>!(x % 2 == 0)\n</code></pre></li> <li> <p>Uma express\u00e3o que avalia se uma vari\u00e1vel <code>x</code>\u00e9 maior que 50 e menor que 100:  <pre><code>x &gt; 50 &amp;&amp; x &lt; 100\n</code></pre></p> </li> <li> <p>Uma express\u00e3o que avalia se uma vari\u00e1vel \u00e9 divis\u00edvel por 3, mas n\u00e3o \u00e9 divis\u00edvel por 5 <pre><code>(x % 3 == 0) &amp;&amp; (x % 5 != 0)\n</code></pre></p> </li> <li> <p>Uma express\u00e3o que avalia se uma vari\u00e1vel <code>x</code>\u00e9 \u00edmpar:  <pre><code>!(x % 2 == 0)\n</code></pre></p> </li> </ul>"},{"location":"#se-entao","title":"Se Ent\u00e3o","text":"<ul> <li>A estrutura Se, ent\u00e3o, verifica o valor de uma express\u00e3o e, se ela for verdadeira, executa o bloco de c\u00f3digo relacionado \u00e0 estrutura.</li> <li>Sintaxe: <pre><code>if(condicao){\n    // inserir codigo a ser executado aqui\n    // caso a condi\u00e7\u00e3o seja verdadeira\n}\n// O programa continua a executar a partir daqui\n</code></pre></li> <li> <p>O programa retoma o seu fluxo normal depois do bloco de c\u00f3digo.  Exemplo</p> </li> <li> <p>Tome o seguinte problema: o usu\u00e1rio dever\u00e1 digitar um inteiro via comunica\u00e7\u00e3o serial e o circuito acender\u00e1 um LED vermelho por um segundo se o inteiro for par.</p> </li> </ul> <p></p> <pre><code>const int pino_led = 2;\n\nint le_inteiro(){\n    int x;\n    while(Serial.available() == 0)\n    {}\n    x = Serial.parseInt();\n    return x;\n}\n\nvoid setup()\n{\n  Serial.begin(9600);\n  pinMode(pino_led,OUTPUT);\n}\n\nvoid loop()\n{\n  int x = le_inteiro();\n  digitalWrite(pino_led,LOW);\n  if(x % 2 == 0){\n    digitalWrite(pino_led,HIGH);\n    delay(1000);\n  }  \n}\n</code></pre> <p>Exemplo</p> <ul> <li>Agora tome o seguinte problema: construir um circuito que que verifique se existe part\u00edculas de g\u00e1s no ar e acione um alarme caso positivo.</li> <li>Para isso precisaremos do sensor de g\u00e1s e de um dispositivo piezoel\u00e9trico, que produzir\u00e1 o som. </li> </ul> <p><pre><code>const int sensor_gas = A0;\nconst int alarme = 2;\nvoid setup()\n{\n  Serial.begin(9600);\n  pinMode(sensor_gas,INPUT);\n}\n\nvoid loop()\n{\n    int valor_gas = analogRead(sensor_gas);\n    Serial.println(\"valor_gas: \");\n    Serial.println(valor_gas);\n    if(valor_gas &gt;= 250){\n        tone(alarme,400,3000);\n    }\n}\n</code></pre> - O g\u00e1s \u00e9 ser lido atrav\u00e9s de um pino anal\u00f3gico. J\u00e1 o alarme \u00e9 acionado atrav\u00e9s de um pino digital. - Se o sensor acusa uma concentra\u00e7\u00e3o de g\u00e1s superior ou igual a 250, acionamos o alarme a uma frequ\u00eancia de 400Hz por 3 segundos atrav\u00e9s do comando <code>tone</code>.</p>"},{"location":"#senao","title":"Sen\u00e3o","text":"<ul> <li>E se quis\u00e9ssemos que  o programa executasse uma l\u00f3gica se a condi\u00e7\u00e3o fosse verdadeira e outra se fosse falsa?</li> <li>Para isso temos o sen\u00e3o .</li> <li>Sintaxe: <pre><code>if(condicao){\n    // Comandos que ser\u00e3o executados se a condi\u00e7\u00e3o for verdadeira\n}\nelse{\n    // comandos que ser\u00e3o executados se a condi\u00e7\u00e3o for falsa\n}\n// o programa continua aqui ap\u00f3s executar um dos blocos de c\u00f3digo acima.\n</code></pre></li> </ul> <p>Exemplo - Vamos tomar o problema anterior de verificar se um lido via comunica\u00e7\u00e3o serial \u00e9 par. Mas desta vez acenderemos um LED verde se ele for par e um LED vermelho se ele for \u00edmpar. Os LEDs dever\u00e3o ficar ligados por 1 segundo.</p> <p></p> <pre><code>const int pino_verde = 2;\nconst int pino_vermelho = 4;\n\nint le_inteiro(){\n    int x;\n    while(Serial.available() == 0)\n    {}\n    x = Serial.parseInt();\n    return x;\n}\n\nvoid setup(){\n  Serial.begin(9600);\n  pinMode(pino_verde,OUTPUT);\n  pinMode(pino_vermelho,OUTPUT);\n}\n\nvoid loop(){\n  int x = le_inteiro();\n  if(x % 2 == 0){\n        digitalWrite(pino_verde,HIGH);\n        delay(1000);\n        digitalWrite(pino_verde,LOW);\n  }\n  else{\n        digitalWrite(pino_vermelho,HIGH);\n        delay(1000);\n        digitalWrite(pino_vermelho,LOW);\n  }\n}\n</code></pre>"},{"location":"#exercicios_1","title":"Exerc\u00edcios","text":"<ol> <li>Fa\u00e7a um circuito que mantenha um LED aceso quando um bot\u00e3o \u00e9 pressionado e o apague quando ele \u00e9 pressionado novamente.</li> <li>Fa\u00e7a um circuito que acenda um LED apenas quando dois bot\u00f5es s\u00e3o pressionados.</li> <li>Elabore um circuito que ligue uma l\u00e2mpada caso o sensor de presen\u00e7a detecte movimento.</li> <li>Fa\u00e7a um circuito que receba um inteiro via comunica\u00e7\u00e3o serial e acenda um LED verde se ele for par e vermelho se ele for \u00edmpar. Os LEDs devem ficar ligados por apenas 1 segundo.</li> </ol>"},{"location":"#estruturas-de-repeticao","title":"Estruturas de repeti\u00e7\u00e3o","text":""},{"location":"blog/","title":"Blog","text":""}]}